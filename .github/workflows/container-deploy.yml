name: Container App Deployment

on:
  push:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'Dockerfile'
      - 'infrastructure/**'
      - 'app.py'
      - 'templates/**'
      - 'static/**'
  workflow_dispatch:

env:
  CONTAINER_REGISTRY: 'laeintelregistry.azurecr.io'
  ACR_NAME: 'laeintelregistry'
  IMAGE_REPOSITORY: 'resume-optimizer'
  RESOURCE_GROUP: 'laeintel-resume-rg'
  CONTAINER_APP_NAME: 'laeintel-resume-app'
  STORAGE_ACCOUNT_NAME: 'laeintelresumestorage'
  STORAGE_CONTAINER_NAME: 'resumes'
  AZURE_LOCATION: 'East US'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set build number
      run: echo "BUILD_NUMBER=${{ github.run_number }}" >> $GITHUB_ENV

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Set Azure Subscription
      run: |
        echo "Setting subscription to ${{ secrets.AZURE_SUBSCRIPTION_ID }}..."
        az account set --subscription "${{ secrets.AZURE_SUBSCRIPTION_ID }}"

    - name: Diagnose Service Principal Permissions
      run: |
        echo "Current Azure identity:"
        az account show
        
        echo "Attempting to list resources in resource group ${{ env.RESOURCE_GROUP }}..."
        az resource list --resource-group ${{ env.RESOURCE_GROUP }} -o table || echo "Could not list resources"
        
        echo "Checking role assignments for service principal..."
        SP_ID=$(az account show --query user.name -o tsv)
        az role assignment list --assignee "$SP_ID" --all -o table || echo "Could not list role assignments"
        
        echo "Listing available Container App Environments..."
        az containerapp env list --output table || echo "Could not list container app environments"

    - name: Create Resource Group and Register Providers
      run: |
        echo "Checking if resource group ${{ env.RESOURCE_GROUP }} exists..."
        if ! az group show --name ${{ env.RESOURCE_GROUP }} --output none 2>/dev/null; then
          echo "Creating resource group ${{ env.RESOURCE_GROUP }}..."
          az group create --name ${{ env.RESOURCE_GROUP }} --location "${{ env.AZURE_LOCATION }}"
        fi
        
        echo "Registering required resource providers..."
        az provider register --namespace Microsoft.App --wait
        az provider register --namespace Microsoft.OperationalInsights --wait
        az provider register --namespace Microsoft.ContainerRegistry --wait
        
        echo "Resource providers registered successfully"

    - name: Create ACR if needed
      run: |
        if ! az acr show --name ${{ env.ACR_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --output none 2>/dev/null; then
          echo "Creating Azure Container Registry ${{ env.ACR_NAME }}..."
          az acr create \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --name ${{ env.ACR_NAME }} \
            --sku Standard \
            --admin-enabled true
          sleep 30
        fi
        
        echo "Getting ACR credentials..."
        ACR_USERNAME=$(az acr credential show --name ${{ env.ACR_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --query username --output tsv)
        ACR_PASSWORD=$(az acr credential show --name ${{ env.ACR_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --query "passwords[0].value" --output tsv)
        
        echo "ACR_USERNAME=$ACR_USERNAME" >> $GITHUB_ENV
        echo "::add-mask::$ACR_PASSWORD"
        echo "ACR_PASSWORD=$ACR_PASSWORD" >> $GITHUB_ENV

    - name: Build and Push Docker Image
      run: |
        echo "ACR Registry: ${{ env.CONTAINER_REGISTRY }}"
        echo "ACR Username is set: $([[ -n "${{ env.ACR_USERNAME }}" ]] && echo "Yes" || echo "No")"
        echo "ACR Password is set: $([[ -n "${{ env.ACR_PASSWORD }}" ]] && echo "Yes" || echo "No")"
        
        # Login to ACR using multiple methods
        echo "Attempting docker login..."
        echo "${{ env.ACR_PASSWORD }}" | docker login ${{ env.CONTAINER_REGISTRY }} -u "${{ env.ACR_USERNAME }}" --password-stdin
        if [ $? -ne 0 ]; then
          echo "Direct docker login failed, trying az acr login..."
          az acr login --name ${{ env.ACR_NAME }}
        fi
        
        echo "ACR login successful"
        
        # Build Docker image
        echo "Building Docker image..."
        docker build -t ${{ env.CONTAINER_REGISTRY }}/${{ env.IMAGE_REPOSITORY }}:${{ env.BUILD_NUMBER }} \
                     -t ${{ env.CONTAINER_REGISTRY }}/${{ env.IMAGE_REPOSITORY }}:latest .
        
        # Test container startup
        echo "Testing container startup locally..."
        docker run --rm -d --name test-container ${{ env.CONTAINER_REGISTRY }}/${{ env.IMAGE_REPOSITORY }}:${{ env.BUILD_NUMBER }}
        sleep 5
        docker logs test-container || true
        docker stop test-container || true
        
        # Push images
        echo "Pushing Docker images..."
        docker push ${{ env.CONTAINER_REGISTRY }}/${{ env.IMAGE_REPOSITORY }}:${{ env.BUILD_NUMBER }}
        docker push ${{ env.CONTAINER_REGISTRY }}/${{ env.IMAGE_REPOSITORY }}:latest

    - name: Create Container App Environment If Not Exists
      run: |
        if ! az containerapp env show --name laeintel-resume-env --resource-group ${{ env.RESOURCE_GROUP }} --output none 2>/dev/null; then
          echo "Creating container app environment..."
          az containerapp env create \
            --name laeintel-resume-env \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --location "${{ env.AZURE_LOCATION }}" \
            --logs-workspace-id default
        fi

    - name: Create Container App If Not Exists
      run: |
        if ! az containerapp show --name ${{ env.CONTAINER_APP_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --output none 2>/dev/null; then
          echo "Creating new container app..."
          az containerapp create \
            --name ${{ env.CONTAINER_APP_NAME }} \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --environment laeintel-resume-env \
            --image ${{ env.CONTAINER_REGISTRY }}/${{ env.IMAGE_REPOSITORY }}:latest \
            --registry-server ${{ env.CONTAINER_REGISTRY }} \
            --registry-username "${{ env.ACR_USERNAME }}" \
            --registry-password "${{ env.ACR_PASSWORD }}" \
            --ingress external \
            --target-port 8000 \
            --min-replicas 1 \
            --env-vars \
              DEBUG="true" \
              PYTHONUNBUFFERED="1" \
              PYTHONPATH="/app" \
              GEMINI_API_KEY="${{ secrets.GEMINI_API_KEY }}" \
              BLOB_CONNECTION_STRING="${{ secrets.BLOB_CONNECTION_STRING }}" \
              RESUME_CONTAINER_NAME="resume" \
              TAILORED_RESUME_CONTAINER_NAME="tailoredresumecontainer" \
              TRACKING_CONTAINER_NAME="trackingcontainer" \
              TRACKING_FILE_NAME="resume_tracking.csv"
        else
          echo "Container app already exists, will update..."
        fi

    - name: Update Container App
      run: |
        echo "Updating container app with new image..."
        
        # Set the container app resource ID with correct subscription ID
        CONTAINER_APP_ID="/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ env.RESOURCE_GROUP }}/providers/Microsoft.App/containerApps/${{ env.CONTAINER_APP_NAME }}"
        
        # Update container app with image
        az containerapp update \
          --ids "$CONTAINER_APP_ID" \
          --image ${{ env.CONTAINER_REGISTRY }}/${{ env.IMAGE_REPOSITORY }}:latest \
          --registry-server ${{ env.CONTAINER_REGISTRY }} \
          --registry-username "${{ env.ACR_USERNAME }}" \
          --registry-password "${{ env.ACR_PASSWORD }}"
      
        # Update environment variables
        echo "Updating container app environment variables..."
        az containerapp update \
          --ids "$CONTAINER_APP_ID" \
          --set-env-vars \
            DEBUG="true" \
            PYTHONUNBUFFERED="1" \
            PYTHONPATH="/app" \
            FLASK_APP="app.py" \
            FLASK_ENV="production" \
            FLASK_DEBUG="0" \
            GEMINI_API_KEY="${{ secrets.GEMINI_API_KEY }}" \
            GEMINI_MODEL_ID="gemini-1.5-pro-latest" \
            BLOB_CONNECTION_STRING="${{ secrets.BLOB_CONNECTION_STRING }}" \
            RESUME_CONTAINER_NAME="resume" \
            TAILORED_RESUME_CONTAINER_NAME="tailoredresumecontainer" \
            TRACKING_CONTAINER_NAME="trackingcontainer" \
            TRACKING_FILE_NAME="resume_tracking.csv"
            
        echo "Deployment completed successfully!"

    - name: Get Application URL
      run: |
        echo "Getting application URL..."
        APP_URL=$(az containerapp show \
          --name ${{ env.CONTAINER_APP_NAME }} \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --query properties.configuration.ingress.fqdn \
          --output tsv)
        
        echo "ðŸš€ Application deployed successfully!"
        echo "ðŸ“± Application URL: https://$APP_URL"
        echo "ðŸ”— Health Check: https://$APP_URL/health" 